package com.mainproject.be28.complain.mapper;

import com.mainproject.be28.complain.dto.ComplainDto.Patch;
import com.mainproject.be28.complain.dto.ComplainPostDto;
import com.mainproject.be28.complain.dto.ComplainResponseDto;
import com.mainproject.be28.complain.entity.Complain;
import com.mainproject.be28.item.entity.Item;
import com.mainproject.be28.member.entity.Member;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2023-09-01T15:40:35+0900",
    comments = "version: 1.4.2.Final, compiler: IncrementalProcessingEnvironment from gradle-language-java-8.2.1.jar, environment: Java 11.0.18 (Azul Systems, Inc.)"
)
@Component
public class ComplainMapperImpl implements ComplainMapper {

    @Override
    public Complain complainPostDtoToComplain(ComplainPostDto complainPostDto) {
        if ( complainPostDto == null ) {
            return null;
        }

        Complain complain = new Complain();

        complain.setItem( complainPostDtoToItem( complainPostDto ) );
        complain.setMember( complainPostDtoToMember( complainPostDto ) );
        complain.setContent( complainPostDto.getContent() );

        return complain;
    }

    @Override
    public ComplainResponseDto complainToComplainResponseDto(Complain complain) {
        if ( complain == null ) {
            return null;
        }

        ComplainResponseDto complainResponseDto = new ComplainResponseDto();

        complainResponseDto.setItemId( complainItemItemId( complain ) );
        complainResponseDto.setMemberId( complainMemberMemberId( complain ) );
        complainResponseDto.setComplainId( complain.getComplainId() );
        complainResponseDto.setContent( complain.getContent() );

        return complainResponseDto;
    }

    @Override
    public Complain complainPatchDtoToComplain(Patch complainPatchDto) {
        if ( complainPatchDto == null ) {
            return null;
        }

        Complain complain = new Complain();

        complain.setComplainId( complainPatchDto.getComplainId() );
        complain.setContent( complainPatchDto.getContent() );

        return complain;
    }

    @Override
    public List<ComplainResponseDto> complainsToComplainResponseDtos(List<Complain> questions) {
        if ( questions == null ) {
            return null;
        }

        List<ComplainResponseDto> list = new ArrayList<ComplainResponseDto>( questions.size() );
        for ( Complain complain : questions ) {
            list.add( complainToComplainResponseDto( complain ) );
        }

        return list;
    }

    protected Item complainPostDtoToItem(ComplainPostDto complainPostDto) {
        if ( complainPostDto == null ) {
            return null;
        }

        Item item = new Item();

        item.setItemId( complainPostDto.getItemId() );

        return item;
    }

    protected Member complainPostDtoToMember(ComplainPostDto complainPostDto) {
        if ( complainPostDto == null ) {
            return null;
        }

        Member member = new Member();

        member.setMemberId( complainPostDto.getMemberId() );

        return member;
    }

    private Long complainItemItemId(Complain complain) {
        if ( complain == null ) {
            return null;
        }
        Item item = complain.getItem();
        if ( item == null ) {
            return null;
        }
        Long itemId = item.getItemId();
        if ( itemId == null ) {
            return null;
        }
        return itemId;
    }

    private Long complainMemberMemberId(Complain complain) {
        if ( complain == null ) {
            return null;
        }
        Member member = complain.getMember();
        if ( member == null ) {
            return null;
        }
        Long memberId = member.getMemberId();
        if ( memberId == null ) {
            return null;
        }
        return memberId;
    }
}
